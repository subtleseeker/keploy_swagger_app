// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"crypto/tls"
	"io"
	"net/http"

	errors "github.com/go-openapi/errors"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	"github.com/keploy/go-sdk/integrations/khttp"
	"github.com/keploy/go-sdk/integrations/khttpclient"
	"github.com/keploy/go-sdk/keploy"
	"github.com/sirupsen/logrus"
	graceful "github.com/tylerb/graceful"

	"keployswagger/restapi/operations"
	"keployswagger/restapi/operations/uploads"
)

// This file is safe to edit. Once it exists it will not be overwritten

//go:generate swagger generate server --target .. --name  --spec ../swagger.yaml

func configureFlags(api *operations.FileUploadAPI) {
	// api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{ ... }
}

func configureAPI(api *operations.FileUploadAPI) http.Handler {
	// configure the api here
	api.ServeError = errors.ServeError

	// Set your custom logger if needed. Default one is log.Printf
	// Expected interface func(string, ...interface{})
	//
	// Example:
	// api.Logger = log.Printf

	api.JSONConsumer = runtime.JSONConsumer()

	api.JSONProducer = runtime.JSONProducer()

	api.UploadsUploadFileHandler = uploads.UploadFileHandlerFunc(func(params uploads.UploadFileParams) middleware.Responder {

		ctx := params.HTTPRequest.Context()
		http.DefaultClient.Transport = khttpclient.NewInterceptor(http.DefaultTransport)
		req, err := http.NewRequestWithContext(ctx, "GET", "http://google.com", nil)
		if err != nil {
			logrus.Fatal(err)
		}
		resp, err := http.DefaultClient.Do(req)
		if err != nil {
			logrus.Fatal(err)
		}
		defer resp.Body.Close()
		respBodyBytes, err := io.ReadAll(resp.Body)
		if err != nil {
			logrus.Fatal(err)
		}
		if string(respBodyBytes) != "" {
			logrus.Info("Got some response")
		}
		return uploads.NewUploadFileOK()
	})

	api.ServerShutdown = func() {}

	return setupGlobalMiddleware(api.Serve(setupMiddlewares))
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
	// Make all necessary changes to the TLS configuration here.
}

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix"
func configureServer(s *graceful.Server, scheme, addr string) {
}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation
func setupMiddlewares(handler http.Handler) http.Handler {
	return handler
}

func addMockingWithKeploy(handler http.Handler) http.Handler {
	// TODO: Add a condition for test/mock path only in mode=test.
	// if keploy.GetMode() == keploy.MODE_TEST
	//pwd, err := os.Getwd()
	//if err != nil {
	//	logrus.Fatal(err)
	//}
	port := "8089"
	k := keploy.New(keploy.Config{
		App: keploy.AppConfig{
			Name:     "my-app",
			Port:     port,
			TestPath: "/keploy/tests",
			MockPath: "/keploy/mocks",
			//TestPath: path.Join(pwd, "groups/go/groups/keploy/tests/"),
			//MockPath: path.Join(pwd, "groups/go/groups/keploy/mocks/"),
		},
		//	Server: keploy.ServerConfig{
		//		URL: "http://10.48.219.137:6789/api",
		//	},
	})
	return khttp.KMiddleware(handler, k)
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics
func setupGlobalMiddleware(handler http.Handler) http.Handler {
	return addMockingWithKeploy(handler)
}
